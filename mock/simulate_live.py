import hashlib
import json
import random
import time
import urllib.parse
from datetime import datetime, timedelta
import yaml
import os
import requests

import dotenv

dotenv.load_dotenv()

API_URL = os.getenv("API_URL", "http://localhost:8080")

# --- Dynamically extract GET endpoints from ers-api.yaml ---
def extract_api_endpoints(yaml_path):
    with open(yaml_path, "r", encoding="utf-8") as f:
        api_spec = yaml.safe_load(f)
    endpoints = []
    paths = api_spec.get("paths", {})
    for path, methods in paths.items():
        if "get" in methods:
            endpoints.append(path)
    return endpoints

# Path to ers-api.yaml (adjust if needed)
ERS_API_YAML = os.path.join(os.path.dirname(__file__), "..", "ers-api.yaml")
API_ENDPOINTS = extract_api_endpoints(ERS_API_YAML)

PRICE_AREAS = ["DK1", "DK2"]
PRODUCTION_TYPES = ["WIND", "SOLAR", "HYDRO", "COMMERCIAL_POWER", "CENTRAL_POWER"]
EXCHANGE_COUNTRIES = ["germany", "greatbritain", "netherlands", "norway", "sweden"]

def random_iso_date(start, end):
    delta = end - start
    random_seconds = random.randint(0, int(delta.total_seconds()))
    return (start + timedelta(seconds=random_seconds)).isoformat()

def generate_params(endpoint):
    now = datetime.utcnow()
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)
    year_ago = now - timedelta(days=365)
    decade_ago = now - timedelta(days=3650)
    # Map endpoint to parameter generation logic
    if endpoint == "/production":
        return {
            "from": random_iso_date(decade_ago, now),
            "to": random_iso_date(month_ago, now),
            "priceArea": random.choice(PRICE_AREAS),
            "type": random.choice(PRODUCTION_TYPES)
        }
    elif endpoint == "/production/total":
        return {
            "from": random_iso_date(decade_ago, now),
            "to": random_iso_date(week_ago, now),
        }
    elif endpoint == "/consumption":
        return {
            "from": random_iso_date(year_ago, now),
            "to": random_iso_date(week_ago, now),
            "priceArea": random.choice(PRICE_AREAS)
        }
    elif endpoint == "/consumption/total":
        return {
            "from": random_iso_date(decade_ago, now),
            "to": random_iso_date(year_ago, now),
            "priceArea": random.choice(PRICE_AREAS)
        }
    elif endpoint == "/exchange":
        return {
            "from": random_iso_date(month_ago, now),
            "to": random_iso_date(week_ago, now),
            "priceArea": random.choice(PRICE_AREAS),
        }
    elif endpoint == "/exchange/country":
        return {
            "from": random_iso_date(decade_ago, now),
            "to": random_iso_date(decade_ago, now),
        }
    else:
        return {}

def simulate_visits(
        n=1000,
        sleep=0,
        base_url=f"{API_URL}",
        run_duration=None,
        stop_event=None
):
    """
    Simulate random user visits by making HTTP GET requests to API endpoints defined in ers-api.yaml.
    No longer inserts into cache_metrics directly; metrics are generated by the backend as a result of these visits.
    """
    start_time = time.time()
    i = 0
    while (run_duration is None and i < n) or (run_duration is not None and (time.time() - start_time < run_duration)):
        if stop_event and stop_event.is_set():
            break

        endpoint = random.choice(API_ENDPOINTS)
        params = generate_params(endpoint)
        query_string = urllib.parse.urlencode(params)
        url = f"{base_url}{endpoint}"
        if query_string:
            url = f"{url}?{query_string}"

        try:
            response = requests.get(url)
            print(f"[{datetime.now().isoformat()}] GET {url} -> {response.status_code}")
        except Exception as e:
            print(f"[{datetime.now().isoformat()}] ERROR requesting {url}: {e}")

        if sleep:
            time.sleep(sleep)
        i += 1

if __name__ == "__main__":
    simulate_visits(n=100, sleep=0.1)
