# Base image with CUDA support - using same CUDA version your PyTorch requires
FROM nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04

# Environment variables for better installation experience
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    TZ=UTC \
    DOCKER_ENV=true \
    PYTHONPATH=/app

# Install system dependencies (combined in one layer)
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    # Create Python symlinks in same layer
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip \
    # Configure pip for better reliability
    && pip config set global.timeout 600 \
    && pip config set global.progress_bar on \
    # Create necessary directories
    && mkdir -p /app/logs /app/models /app/model_checkpoints /app/cache_eval_results

# Set working directory
WORKDIR /app

# Upgrade pip and install basic tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first to leverage Docker cache
COPY requirements.txt .

# Install PyTorch with CUDA support explicitly matching base image version
RUN pip install --no-cache-dir --timeout=900 \
    torch==2.1.0+cu121 \
    --extra-index-url https://download.pytorch.org/whl/cu121

# Install TensorFlow with specific version for better compatibility
RUN pip install --no-cache-dir --timeout=900 tensorflow==2.14.0

# Install dependencies from requirements.txt (excluding any ML libraries already installed)
RUN pip install --no-cache-dir -r requirements.txt

# Install additional ML dependencies in a separate layer
RUN pip install --no-cache-dir \
    stable-baselines3 \
    gymnasium \
    matplotlib \
    numpy \
    pandas

# Copy application files
COPY . .

# Expose API port
EXPOSE 8000

# Default command to run the server
CMD ["python", "main.py"]